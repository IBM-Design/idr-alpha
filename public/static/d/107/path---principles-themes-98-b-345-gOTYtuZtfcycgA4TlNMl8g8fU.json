{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Themes are used to customize component styles to fit the specific aesthetic of a brand or product.`), React.createElement(AnchorLinks, null, React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#theming-basics\"\n      }\n    }, `Theming basics`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#customizing-a-theme\"\n      }\n    }, `Customizing a theme`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#tokens\"\n      }\n    }, `Tokens`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#theming-applied\"\n      }\n    }, `Theming applied`)))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Resources`), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\",\n      bleed: \"true\"\n    }, React.createElement(ClickableTile, {\n      title: \"Theming sandbox\",\n      href: \"http://themes.carbondesignsystem.com/\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"sandbox icon\",\n      title: \"\",\n      src: \"/static/6c228cfe2ab2ee15d1c722c13f3eced0/fdc01/sandbox-icon.png\",\n      srcSet: \"/static/6c228cfe2ab2ee15d1c722c13f3eced0/fdc01/sandbox-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    })))), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Theming basics`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Themes are used to modify existing components to fit a specific visual style. By using Carbonâ€™s tokens, developers can easily customize all of their components by changing a set of universal variables, eliminating the need to modify individual components.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Theme terms`), React.createElement(MDXTag, {\n      name: \"table\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"thead\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"thead\"\n    }, React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Term`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Definition`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }))), React.createElement(MDXTag, {\n      name: \"tbody\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `Theme`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `The set of unique values assigned to the tokens of a Carbon interface`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    })), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `Token`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `The code identifier for a unique role or set of roles. Tokens are universal and never change across themes.`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    })), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `Role`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `The systematic usage(s) of a token. Roles cannot be changed between themes.`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    })), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `Value`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `The actual style (i.e. hex code) assigned to a token`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    })))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Default theme`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon provides four themes as shown in the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/guidelines/color/usage\"\n      }\n    }, `color usage`), ` page. When `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `carbon-components`), ` is downloaded and installed, the components are preset to use the default (white) theme.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To use the gray 10, gray 90, or gray 100 theme as your default instead of white, set the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$carbon--theme`), ` variable to one of the available theme maps (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$carbon--theme--g10`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$carbon--theme--g90`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$carbon--theme--g100`), `) and then include your normal components in your Sass build.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `@import './path/to/carbon-components/scss/globals/scss/vendor/@carbon/elements/scss/themes/theme-maps';\n\n\\$carbon--theme: \\$carbon--theme--g90;\n\n// import Carbon styles here\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Customizing a theme`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The default theme acts as a starting point; from there designers and developers can define how their own components and styles deviate from the default. Altering one, some, or all of the default token values will result in a new theme. The developer then packages those new values into a new theme SCSS stylesheet which will replace the values of the default theme.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `1. Create a theme mixin that effectively mimics this structure, but changes up hex values as needed:`), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `@mixin my-theme {\n  \\$interactive-01: #0062ff !global;\n  \\$interactive-02: #171717 !global;\n  \\$interactive-03: #0062ff !global;\n  \\$interactive-04: #0062ff !global;\n  \\$ui-background: #ffffff !global;\n  \\$ui-01: #f3f3f3 !global;\n  \\$ui-02: #ffffff !global;\n  \\$ui-03: #dcdcdc !global;\n  \\$ui-04: #8c8c8c !global;\n  \\$ui-05: #171717 !global;\n  \\$text-01: #171717 !global;\n  \\$text-02: #565656 !global;\n  \\$text-03: #8c8c8c !global;\n  \\$text-04: #ffffff !global;\n  \\$icon-01: #171717 !global;\n  \\$icon-02: #565656 !global;\n  \\$icon-03: #ffffff !global;\n  \\$link-01: #0062ff !global;\n  \\$field-01: #f3f3f3 !global;\n  \\$field-02: #ffffff !global;\n  \\$inverse-01: #ffffff !global;\n  \\$inverse-02: #3d3d3d !global;\n  \\$support-01: #da1e28 !global;\n  \\$support-02: #24a148 !global;\n  \\$support-03: #fdd13a !global;\n  \\$support-04: #054ada !global;\n  \\$overlay-01: rgba(23, 23, 23, 0.5) !global;\n  \\$focus: #0062ff !global;\n  \\$hover-primary: #0353e9 !global;\n  \\$active-primary: #0530ad !global;\n  \\$hover-primary-text: #054ada !global;\n  \\$hover-secondary: #4c4c4c !global;\n  \\$active-secondary: #6f6f6f !global;\n  \\$hover-tertiary: #0353e9 !global;\n  \\$active-tertiary: #0530ad !global;\n  \\$hover-ui: #e5e5e5 !global;\n  \\$active-ui: #bebebe !global;\n  \\$selected-ui: #dcdcdc !global;\n  \\$hover-selected-ui: #cacaca !global;\n  \\$hover-danger: #ba1b23 !global;\n  \\$active-danger: #750e13 !global;\n  \\$hover-row: #e5e5e5 !global;\n  \\$visited-link: #8a3ffc !global;\n  \\$disabled-01: #f3f3f3 !global;\n  \\$disabled-02: #bebebe !global;\n  \\$disabled-03: #8c8c8c !global;\n  \\$highlight: #c9deff !global;\n  \\$brand-01: #0062ff !global;\n  \\$brand-02: #171717 !global;\n  \\$brand-03: #0062ff !global;\n  \\$active-01: #bebebe !global;\n  \\$hover-field: #e5e5e5 !global;\n}\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `2. Name the mixin (i.e., `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"h4\"\n    }, `my-theme`), `)`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `3. Include this in your SCSS, before importing components, etc.:`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@include my-theme();`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Alternatively, for relatively minor changes to an existing theme, a developer can make changes on a per-token basis. For example, after importing an existing Carbon theme, she could just set something like `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$interactive-01: hotpink;`), `.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Tokens`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `With tokens, the code only needs to be changed in one place to see the effect system-wide. Tokens are used across all components and help keep global patterns and styles consistent.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All tokens come pre-baked into the Carbon component source code. Tokens are denoted by the prefix `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$`), ` (e.g. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$ui-01`), `). Tokens can also be nested within other tokens. For example, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$interactive-01`), ` calls the IBM Design Language color palette token `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\\$ibm-color__blue--60`), ` for its value in the default theme.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are several token categories:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Color`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Spacing`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Typography`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Global`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Color`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Each theme is assigned 52 universal color variables, which are determined by `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/guidelines/color/usage\"\n      }\n    }, `common roles and usage`), `. This allows for uniform color application across themes while maintaining full styling flexibility.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `//// _theme-tokens.scss\n// White theme tokens\n\\$interactive-01: #0062ff !default;\n\\$interactive-02: #171717 !default;\n\\$interactive-03: #0062ff !default;\n\\$interactive-04: #0062ff !default;\n\\$ui-background: #ffffff !default;\n\\$ui-01: #f3f3f3 !default;\n\\$ui-02: #ffffff !default;\n\\$ui-03: #dcdcdc !default;\n\\$ui-04: #8c8c8c !default;\n\\$ui-05: #171717 !default;\n\\$text-01: #171717 !default;\n\\$text-02: #565656 !default;\n\\$text-03: #8c8c8c !default;\n\\$text-04: #ffffff !default;\n\\$icon-01: #171717 !default;\n\\$icon-02: #565656 !default;\n\\$icon-03: #ffffff !default;\n\\$link-01: #0062ff !default;\n\\$field-01: #f3f3f3 !default;\n\\$field-02: #ffffff !default;\n\\$inverse-01: #ffffff !default;\n\\$inverse-02: #3d3d3d !default;\n\\$support-01: #da1e28 !default;\n\\$support-02: #24a148 !default;\n\\$support-03: #fdd13a !default;\n\\$support-04: #054ada !default;\n\\$overlay-01: rgba(23, 23, 23, 0.5) !default;\n\\$focus: #0062ff !default;\n\\$hover-primary: #0353e9 !default;\n\\$active-primary: #0530ad !default;\n\\$hover-primary-text: #054ada !default;\n\\$hover-secondary: #4c4c4c !default;\n\\$active-secondary: #6f6f6f !default;\n\\$hover-tertiary: #0353e9 !default;\n\\$active-tertiary: #0530ad !default;\n\\$hover-ui: #e5e5e5 !default;\n\\$active-ui: #bebebe !default;\n\\$selected-ui: #dcdcdc !default;\n\\$hover-selected-ui: #cacaca !default;\n\\$hover-danger: #ba1b23 !default;\n\\$active-danger: #750e13 !default;\n\\$hover-row: #e5e5e5 !default;\n\\$visited-link: #8a3ffc !default;\n\\$disabled-01: #f3f3f3 !default;\n\\$disabled-02: #bebebe !default;\n\\$disabled-03: #8c8c8c !default;\n\\$highlight: #c9deff !default;\n\\$brand-01: #0062ff !default;\n\\$brand-02: #171717 !default;\n\\$brand-03: #0062ff !default;\n\\$active-01: #bebebe !default;\n\\$hover-field: #e5e5e5 !default;\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Spacing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon has two spacing scales, one for general spacing within components and the other for layout spacing. Both are designed to complement the components and typography throughout the system. Each scale has its own `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/guidelines/spacing\"\n      }\n    }, `distinct purpose`), `. The two scales have certain overlapping values that serve two different roles, so be mindful when choosing a spacing token.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `//// _spacing.scss\n\\$spacing-baseline: 1rem !default;\n\n// Spacing scale\n\\$spacing-4xs: \\$spacing-baseline * 0.0625 !default;\n\\$spacing-3xs: \\$spacing-baseline * 0.125 !default;\n\\$spacing-2xs: \\$spacing-baseline * 0.25 !default;\n\\$spacing-xs: \\$spacing-baseline * 0.5 !default;\n\\$spacing-sm: \\$spacing-baseline * 0.75 !default;\n\\$spacing-md: \\$spacing-baseline !default;\n\\$spacing-lg: \\$spacing-baseline * 1.5 !default;\n\\$spacing-xl: \\$spacing-baseline * 2 !default;\n\\$spacing-2xl: \\$spacing-baseline * 2.5 !default;\n\\$spacing-3xl: \\$spacing-baseline * 3 !default;\n\n// Layout scale\n\\$layout-2xs: \\$spacing-baseline !default;\n\\$layout-xs: \\$spacing-baseline * 1.5 !default;\n\\$layout-sm: \\$spacing-baseline * 2 !default;\n\\$layout-md: \\$spacing-baseline * 3 !default;\n\\$layout-lg: \\$spacing-baseline * 4 !default;\n\\$layout-xl: \\$spacing-baseline * 6 !default;\n\\$layout-2xl: \\$spacing-baseline * 10 !default;\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Typography`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Typography has four categories of type styles (universal, productive, editorial, and additional) that can be customized through tokens. These tokens are used both within components and across layouts. Type tokens are determined by their `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/guidelines/typography/productive\"\n      }\n    }, `role`), ` across the system.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `// Universal\n\\$caption-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(1),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(16px),\n  letter-spacing: 0.32px,\n) !default;\n\n\\$label-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(1),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(16px),\n  letter-spacing: 0.32px,\n) !default;\n\n\\$helper-text-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(1),\n  font-style: italic,\n  line-height: carbon--rem(16px),\n  letter-spacing: 0.32px,\n) !default;\n\n\\$body-short-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(2),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(18px),\n  letter-spacing: 0.16px,\n) !default;\n\n\\$body-long-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(2),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(20px),\n  letter-spacing: 0.16px,\n) !default;\n\n\\$body-short-02: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(3),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(22px),\n  letter-spacing: 0,\n) !default;\n\n\\$body-long-02: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(3),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(24px),\n  letter-spacing: 0,\n) !default;\n\n\\$code-01: (\n  font-family: carbon--font-family('mono'),\n  font-size: carbon--type-scale(1),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(16px),\n  letter-spacing: 0.32px,\n) !default;\n\n\\$code-02: (\n  font-family: carbon--font-family('mono'),\n  font-size: carbon--type-scale(2),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(20px),\n  letter-spacing: 0.32px,\n) !default;\n\n\\$heading-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(2),\n  font-weight: carbon--font-weight('semibold'),\n  line-height: carbon--rem(18px),\n  letter-spacing: 0.16px,\n) !default;\n\n\\$heading-02: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(3),\n  font-weight: carbon--font-weight('semibold'),\n  line-height: carbon--rem(22px),\n  letter-spacing: 0,\n) !default;\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `// Productive\n\\$productive-heading-03: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(5),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(26px),\n  letter-spacing: 0,\n) !default;\n\n\\$productive-heading-04: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(7),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(36px),\n  letter-spacing: 0,\n) !default;\n\n\\$productive-heading-05: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(8),\n  font-weight: carbon--font-weight('regular'),\n  line-height: carbon--rem(40px),\n  letter-spacing: 0,\n) !default;\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `// Expressive\n\\$expressive-heading-03: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(5),\n  font-weight: carbon--font-weight('regular'),\n  line-height: 130%,\n  letter-spacing: 0,\n  breakpoints: (\n    xlg: (\n      font-size: carbon--type-scale(5),\n      line-height: 125%,\n    ),\n    max: (\n      font-size: carbon--type-scale(6),\n    ),\n  ),\n) !default;\n\n\\$expressive-heading-04: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(7),\n  font-weight: carbon--font-weight('regular'),\n  line-height: 129%,\n  letter-spacing: 0,\n  breakpoints: (\n    xlg: (\n      font-size: carbon--type-scale(7),\n      line-height: 125%,\n    ),\n    max: (\n      font-size: carbon--type-scale(8),\n    ),\n  ),\n) !default;\n\n\\$expressive-heading-05: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(8),\n  font-weight: carbon--font-weight('regular'),\n  line-height: 125%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(9),\n      line-height: 122%,\n    ),\n    lg: (\n      font-size: carbon--type-scale(10),\n      line-height: 119%,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(11),\n      line-height: 117%,\n    ),\n    max: (\n      font-size: carbon--type-scale(13),\n    ),\n  ),\n) !default;\n\n\\$expressive-heading-06: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(8),\n  font-weight: carbon--font-weight('semibold'),\n  line-height: 125%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(9),\n      line-height: 122%,\n    ),\n    lg: (\n      font-size: carbon--type-scale(10),\n      line-height: 119%,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(11),\n      line-height: 117%,\n    ),\n    max: (\n      font-size: carbon--type-scale(13),\n    ),\n  ),\n) !default;\n\n\\$expressive-paragraph-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(6),\n  font-weight: carbon--font-weight('light'),\n  line-height: 125%,\n  letter-spacing: 0,\n  breakpoints: (\n    lg: (\n      font-size: carbon--type-scale(7),\n      line-height: 129%,\n    ),\n    max: (\n      font-size: carbon--type-scale(8),\n      line-height: 125%,\n    ),\n  ),\n);\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `// Additional styles\n\\$quotation-01: (\n  font-family: carbon--font-family('serif'),\n  font-size: carbon--type-scale(5),\n  font-weight: carbon--font-weight('regular'),\n  line-height: 130%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(5),\n    ),\n    lg: (\n      font-size: carbon--type-scale(6),\n      line-height: 125%,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(7),\n      line-height: 129%,\n    ),\n    max: (\n      font-size: carbon--type-scale(8),\n      line-height: 125%,\n    ),\n  ),\n) !default;\n\n\\$quotation-02: (\n  font-family: carbon--font-family('serif'),\n  font-size: carbon--type-scale(8),\n  font-weight: carbon--font-weight('light'),\n  line-height: 125%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(9),\n      line-height: 122%,\n    ),\n    lg: (\n      font-size: carbon--type-scale(10),\n      line-height: 119%,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(11),\n      line-height: 117%,\n    ),\n    max: (\n      font-size: carbon--type-scale(13),\n    ),\n  ),\n) !default;\n\n\\$display-01: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(10),\n  font-weight: carbon--font-weight('light'),\n  line-height: 119%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(10),\n    ),\n    lg: (\n      font-size: carbon--type-scale(12),\n    ),\n    xlg: (\n      font-size: carbon--type-scale(13),\n      line-height: 117%,\n    ),\n    max: (\n      font-size: carbon--type-scale(15),\n      line-height: 113%,\n    ),\n  ),\n) !default;\n\n\\$display-02: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(10),\n  font-weight: carbon--font-weight('semibold'),\n  line-height: 119%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(10),\n    ),\n    lg: (\n      font-size: carbon--type-scale(12),\n    ),\n    xlg: (\n      font-size: carbon--type-scale(13),\n      line-height: 116%,\n    ),\n    max: (\n      font-size: carbon--type-scale(15),\n      line-height: 113%,\n    ),\n  ),\n) !default;\n\n\\$display-03: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(10),\n  font-weight: carbon--font-weight('light'),\n  line-height: 119%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(14),\n      line-height: 115%,\n    ),\n    lg: (\n      font-size: carbon--type-scale(17),\n      line-height: 111%,\n      letter-spacing: -0.64px,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(20),\n      line-height: 107%,\n      letter-spacing: -0.64px,\n    ),\n    max: (\n      font-size: carbon--type-scale(23),\n      line-height: 105%,\n      letter-spacing: -0.96px,\n    ),\n  ),\n) !default;\n\n\\$display-04: (\n  font-family: carbon--font-family('sans'),\n  font-size: carbon--type-scale(10),\n  font-weight: carbon--font-weight('semibold'),\n  line-height: 119%,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: carbon--type-scale(14),\n      line-height: 115%,\n    ),\n    lg: (\n      font-size: carbon--type-scale(17),\n      line-height: 111%,\n      letter-spacing: -0.64px,\n    ),\n    xlg: (\n      font-size: carbon--type-scale(20),\n      line-height: 107%,\n      letter-spacing: -0.64px,\n    ),\n    max: (\n      font-size: carbon--type-scale(23),\n      line-height: 105%,\n      letter-spacing: -0.96px,\n    ),\n  ),\n) !default;\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Global`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The other categories are global and component-specific variables. These control more general styling of components, such as layer usage or border width.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `// Global\n\\$input-border: 1px solid transparent !default !global;\n\\$input-label-weight: 400 !default !global;\n\\$disabled: \\$disabled-02 !default !global;\n\\$disabled-background-color: \\$disabled-01 !default !global;\n\\$focus: \\$ibm-color__blue-60 !default !global;\n\n// Link\n\\$link-visited: \\$ibm-color__purple-60 !default !global;\n\\$link-inverse-color: #6ea6ff !default !global;\n\n// Tooltip\n\\$tooltip-background-color: \\$inverse-02 !default !global;\n\n// Button Theme Variables\n\\$button-font-weight: 400 !default !global;\n\\$button-font-size: 0.875rem !default !global;\n\\$button-border-radius: 0 !default !global;\n\\$button-height: 48px !default !global;\n\\$button-padding: 0.875rem 15px !default !global;\n\\$button-padding-sm: 0.375rem 15px !default !global;\n\\$button-padding-lg: \\$carbon--spacing-04 !default !global;\n\\$button-border-width: 1px !default !global;\n\\$button-outline-width: 3px !default !global;\n\\$button-outline-offset: -5px !default !global;\n\\$button-outline: 1px solid \\$ibm-color__white-0 !default !global;\n\n// Accordion (Reverse)\n\\$accordion-flex-direction: row-reverse !default !global;\n\\$accordion-justify-content: flex-start !default !global;\n\\$accordion-arrow-margin: 0 \\$carbon--spacing-05 0 0 !default !global;\n\\$accordion-title-margin: 0 0 0 \\$carbon--spacing-05 !default !global;\n\\$accordion-content-padding: 0 0 0 \\$carbon--spacing-05 !default !global;\n\n// Card\n\\$card-text-align: center !default !global;\n\\$card-flex-align: center !default !global;\n\n// Checkbox\n\\$checkbox-border-width: 2px !default !global;\n\n// Code Snippet\n\\$snippet-background-color: \\$ui-01 !default !global;\n\\$snippet-border-color: \\$ui-03 !default !global;\n\n// Content Switcher\n\\$content-switcher-border-radius: 0px !default !global;\n\\$content-switcher-option-border: 1px solid \\$brand-01 !default !global;\n\\$content-switcher-divider: \\$ui-03 !default !global;\n\n// Data Table\n\\$data-table-heading-transform: uppercase !default !global;\n\\$data-table-heading-border-bottom: 1px solid \\$brand-01 !default !global;\n\\$data-table-row-height: 2rem !default !global;\n\\$data-table-zebra-color: #fcfcfc !default !global;\n\\$data-table-column-hover: \\$hover-selected-ui !default !global;\n\n// Date Picker\n\\$date-picker-in-range-background-color: \\$ibm-color__blue-20 !default !global;\n\n// Modal\n\\$modal-border-top: \\$brand-01 4px solid !default !global;\n\\$modal-footer-background-color: \\$ui-03 !default !global;\n\n// Notification\n\\$notification-info-background-color: \\$ibm-color__blue-10 !default !global;\n\\$notification-error-background-color: \\$ibm-color__red-10 !default !global;\n\\$notification-warning-background-color: rgba(#fdd13a, 0.15) !default !global;\n\\$notification-success-background-color: \\$ibm-color__green-10 !default !global;\n\n// Progress Indicator\n\\$progress-indicator-bar-width: 1px inset transparent !default !global;\n\\$progress-indicator-stroke-width: 5 !default !global;\n\\$progress-indicator-line-offset: 0.625rem !default !global;\n\n//Code Snippet\n\\$copy-active: \\$active-ui !default !global;\n\\$copy-btn-feedback: \\$ibm-color__gray-80 !default !global;\n\n// Radio Button\n\\$radio-border-width: 1px !default !global;\n\n// Structured Theme Variables\n\\$structured-list-padding: 2rem !default !global;\n\\$structured-list-text-transform: none !default !global;\n\n// Slider\n\n// Tab\n\\$tab-underline-color: 3px solid \\$ibm-color__gray-30 !default !global;\n\\$tab-underline-color-hover: 3px solid \\$ibm-color__gray-60 !default !global;\n\\$tab-text-disabled: \\$ibm-color__gray-30 !default !global;\n\\$tab-underline-disabled: 3px solid \\$ibm-color__gray-10 !default !global;\n\n// Skeleton Loading\n\\$skeleton: rgba(\\$color__blue-51, 0.1) !default !global;\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Theming applied`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following example demonstrates the relationship between the different themes. Each theme shares the same variables and roles, with only the value changing for each individual theme.`), React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/themes-1-9ea5aef4475e6b22c675bfd87448c2e1.svg\",\n        \"alt\": \"Default theme applied\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"table\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"thead\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"thead\"\n    }, React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Key`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Token`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Role`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `White theme value`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Dark theme value`))), React.createElement(MDXTag, {\n      name: \"tbody\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `1`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$text-02`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Label color`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#565656`), ` / Gray 70`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#bebebe`), ` / Gray 30`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `2`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$text-01`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Primary text color`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#171717`), ` / Gray 100`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#f3f3f3`), ` / Gray 10`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `3`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$ui-04`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Border bottom color`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#8c8c8c`), ` / Gray 50`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#a4a4a4`), ` / Gray 40`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `4`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$icon-01`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Primary icon color`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#171717`), ` / Gray 100`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#f3f3f3`), ` / Gray 10`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `5`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$field-01`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Field color`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#f3f3f3`), ` / Gray 10`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#3d3d3d`), ` / Gray 80`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `6`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `\\$ui-02`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Page background`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#ffffff`), ` / White`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `#282828`), ` / Gray 90`)))));\n  }\n\n}"},"fields":{"slug":"/principles/themes/themes","currentPage":"themes"},"frontmatter":{"title":"Themes","label":"Themes are used to customize component styles to fit the specific aesthetic of a brand or product.","tabs":null,"internal":null}}},"pageContext":{"slug":"/principles/themes/themes","currentPage":"themes"}}