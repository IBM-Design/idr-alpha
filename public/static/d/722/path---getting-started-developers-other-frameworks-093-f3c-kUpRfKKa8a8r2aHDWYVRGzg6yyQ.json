{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(AnchorLinks, null, React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#development-options\"\n      }\n    }, `Development options`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#other-frameworks\"\n      }\n    }, `Other frameworks?`)))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Development options`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The Carbon Design System supports vanilla JS, React and Angular as core parts of the product. But you can still build components even if you’re using a different framework.`), React.createElement(AnchorLinks, {\n      small: true\n    }, React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#using-just-the-styles\"\n      }\n    }, `Using just the styles`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#wrapping-components-with-javascript-frameworks\"\n      }\n    }, `Wrapping a component with a JavaScript framework of your choice`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#examples\"\n      }\n    }, `Examples`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#troubleshooting\"\n      }\n    }, `Troubleshooting`)))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Using just the styles`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Developers wanting to build in different ways follow the instructions for the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/getting-started/developers/vanilla\"\n      }\n    }, `Vanilla`), ` library to access the styles and build out their own components.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Wrapping components with JavaScript frameworks`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Many JavaScript frameworks have a mechanism to dynamically create/destroy DOM elements, for example, upon change in array.\nThis often makes it unclear when the DOM element to instantiate a Carbon component is available, which often depends on the JavaScript framework you use.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Also when DOM elements that Carbon components have been instantiated on are being destroyed, the Carbon component instances should be released so that e.g. there are no zombie event handlers.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The easiest way to hook on the creation/destruction of DOM elements is by defining a “wrapping component”, with the JavaScript framework of your choice. Here’s an example using Web Components’ `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements\"\n      }\n    }, `Custom Elements v1 spec`), `, but the notion of components, along with the lifecycle callbacks, are commonly found in many other JavaScript frameworks.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `class BXLoading extends HTMLElement {\n  // Called when this custom element gets into render tree\n  connectedCallback() {\n    // \"this\" here is \"<bx-loading>\" element\n    this.innerHTML =\n      '(e.g. snippet from http://carbondesignsystem.com/components/loading/code)';\n    this.loading = CarbonComponents.Loading.create(\n      this.querySelector('[data-loading]')\n    );\n  }\n  // Called when this custom element gets out of render tree\n  disconnectedCallback() {\n    this.loading.release();\n  }\n}\ncustomElements.define('bx-loading', BXLoading);\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Examples`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://codepen.io/asudoh/pen/VryJBO?editors=1010\"\n      }\n    }, `Angular 4 wrapper for Carbon`), ` (We use this just as an example. `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/ibm/carbon-components-angular\"\n      }\n    }, `Angular`), ` is now supported by the Carbon Design System.)`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Troubleshooting`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you experience any issues while getting set up with Carbon Components, please head over to the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/ibm/carbon-components\"\n      }\n    }, `Carbon Components GitHub repo`), ` for more guidelines and support. Please `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/ibm/carbon-components/issues\"\n      }\n    }, `create an issue`), ` if your issue does not already exist.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Other frameworks?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We are open to the idea of providing core support for additional frameworks in future. We added Angular support in the summer of 2018 and Vue in early 2019.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For the Carbon Design System to incorporate additional frameworks into our core offering, those frameworks need clear, guaranteed, ongoing resources to maintain and support that option. If a team built a product using a native web components implemenation of Carbon, for example, but had no plan to support that solution outside of their product, that couldn’t become a core part of the Carbon Design System.`));\n  }\n\n}"},"fields":{"slug":"/getting-started/developers/other-frameworks","currentPage":"other-frameworks"},"frontmatter":{"title":"Developers","label":null,"tabs":["Vanilla","React","Angular","Vue","Other frameworks"],"internal":null}}},"pageContext":{"slug":"/getting-started/developers/other-frameworks","currentPage":"other-frameworks"}}