{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `General guidance`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Code snippets`), ` are small blocks of reusable code that can be inserted in a code file.\nvariations.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(\"p\", null, `Our code snippets are built with basic styling. We recommend using `, React.createElement(\"a\", {\n      href: \"https://github.com/chriskempson/base16\",\n      target: \"blank\"\n    }, `Base16`), ` for more complex syntax highlighting. Base16 provides carefully chosen syntax highlighting and a default set of sixteen colors suitable for a wide range of applications. The theme we recommend using is `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Solarflare`), `.`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Overflow`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If there are more than nine lines of code, apply vertical scrolling to the code snippet.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Terminal commands are often longer strings and should only appear on one line. Apply horizontal scrolling to maintain the set width of the box for those longer strings.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Interaction`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Code snippets are accompanied by a `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `copy icon`), `, which allows users to copy the provided code to their clipboard. The copy icon must be accompanied by a confirmation that states the successful action of copying an item to the users clipboard.`), React.createElement(ImageComponent, {\n      cols: \"8\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1120px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"47.55434782608695%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"code snippet example\",\n      title: \"\",\n      src: \"/static/c86dee9478849fcc5062dd853652e4ae/24bd0/code-snippet-usage-1.png\",\n      srcSet: \"/static/c86dee9478849fcc5062dd853652e4ae/7cb4c/code-snippet-usage-1.png 280w,\\n/static/c86dee9478849fcc5062dd853652e4ae/7ff44/code-snippet-usage-1.png 560w,\\n/static/c86dee9478849fcc5062dd853652e4ae/24bd0/code-snippet-usage-1.png 1120w,\\n/static/c86dee9478849fcc5062dd853652e4ae/b4af2/code-snippet-usage-1.png 1472w\",\n      sizes: \"(max-width: 1120px) 100vw, 1120px\"\n    }))));\n  }\n\n}"},"fields":{"slug":"/components/code-snippet/usage","currentPage":"usage"},"frontmatter":{"title":"Code snippet","label":null,"tabs":["Code","Usage","Style"],"internal":null}}},"pageContext":{"slug":"/components/code-snippet/usage","currentPage":"/components/code"}}