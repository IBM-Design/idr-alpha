{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `IBM Productive type set`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Productive type is reserved for use in web-based product design, where the user needs to focus on tasks. The Productive styles are curated to create a series of clear user expectations about hierarchy.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The Productive styles below introduce the new IBM Design Language tokens. The difference between the Productive and Expressive styles is mainly evident in the Headings. Aside from the token names, which are specifically calibrated for product vs. editorial designers (e.g. \\$label-01 vs. \\$caption-01) — the Supporting and Body styles have the same values in both the Productive and Expressive sets.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Even though IBM Plex contains a wide range of scales, it’s important to use curated sets below for their specified purpose. For consistent, reliable performance across various screen sizes, do not use fluid type in components or in product UI.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `The Editorial type set tab is coming soon.`)), React.createElement(\"br\", null), React.createElement(TypeSpec, {\n      token: \"code-01\",\n      description: \"This is for inline code snippets and smaller code elements.\"\n    }, \"Type: IBM Plex Mono\", React.createElement(\"br\", null), \"Size: 12px / .75rem\", React.createElement(\"br\", null), \"Line height: 16px / 1rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: .32px\"), React.createElement(TypeSpec, {\n      token: \"code-02\",\n      description: \"This is for large code snippets and larger code elements.\"\n    }, \"Type: IBM Plex Mono\", React.createElement(\"br\", null), \"Size: 14px / .875rem\", React.createElement(\"br\", null), \"Line height: 20px / 1.25rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: .32px\"), React.createElement(TypeSpec, {\n      token: \"label-01\",\n      description: \"This is for field labels in components and error messages.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 12px / .75rem\", React.createElement(\"br\", null), \"Line height: 16px / 1rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: .32px\"), React.createElement(TypeSpec, {\n      token: \"helper-text-01\",\n      description: \"This is for explanatory helper text that appears below a field title within a component.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 12px / .75rem\", React.createElement(\"br\", null), \"Line height: 16px / 1rem \", React.createElement(\"br\", null), \"Weight: 400 / Italic\", React.createElement(\"br\", null), \"Letter-spacing: .32px\"), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Body`), React.createElement(\"br\", null), React.createElement(TypeSpec, {\n      token: \"body-short-01\",\n      description: \"This is for short paragraphs with no more than four lines and is commonly used in components.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 14px / .875rem\", React.createElement(\"br\", null), \"Line height: 18px / 1.125rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: .16px\"), React.createElement(TypeSpec, {\n      token: \"body-long-01\",\n      description: \"This is commonly used in both the expressive and the productive type theme layouts for long paragraphs with more than four lines. It is a good size for comfortable, long-form reading. We also use this for longer body copy in components such as accordion or structured list. Always left-align this type; never center it.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 14px / .875rem\", React.createElement(\"br\", null), \"Line height: 20px / 1.25rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: .16px\"), React.createElement(TypeSpec, {\n      token: \"body-short-02\",\n      description: \"This is for short paragraphs with no more than four lines and is commonly used in the expressive type theme for layouts.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 16px / 1rem\", React.createElement(\"br\", null), \"Line height: 22px / 1.375rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: 0\"), React.createElement(TypeSpec, {\n      token: \"body-long-02\",\n      description: \"This is commonly used in the expressive type theme layouts for long paragraphs with more than four lines. The looser line height and larger size makes for comfortable, long-form reading, in mediums that allow for more space. This type size is rarely used for body copy in components. Always left-align type; never center it.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 16px / 1rem\", React.createElement(\"br\", null), \"Line height: 24px / 1.5rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: 0\"), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Headings`), React.createElement(\"br\", null), React.createElement(TypeSpec, {\n      token: \"heading-01\",\n      description: \"This is for component and layout headings.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 14px / .875rem\", React.createElement(\"br\", null), \"Line height: 18px / 1.125rem \", React.createElement(\"br\", null), \"Weight: 600 / Semi-bold\", React.createElement(\"br\", null), \"Letter-spacing: .16px\"), React.createElement(TypeSpec, {\n      token: \"heading-02\",\n      description: \"This is for component and layout headings.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 16px / 1rem\", React.createElement(\"br\", null), \"Line height: 22px / 1.375rem \", React.createElement(\"br\", null), \"Weight: 600 / Semi-bold\", React.createElement(\"br\", null), \"Letter-spacing: 0px\"), React.createElement(TypeSpec, {\n      token: \"productive-heading-03\",\n      description: \"This is for component and layout headings.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 20px / 1.25rem\", React.createElement(\"br\", null), \"Line height: 26px / 1.625rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: 0px\"), React.createElement(TypeSpec, {\n      token: \"productive-heading-04\",\n      description: \"This is for layout headings.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 28px / 1.75rem\", React.createElement(\"br\", null), \"Line height: 36px / 2.25rem \", React.createElement(\"br\", null), \"Weight: 400 / Regular\", React.createElement(\"br\", null), \"Letter-spacing: 0px\"), React.createElement(TypeSpec, {\n      token: \"productive-heading-05\",\n      description: \"This is for layout headings.\"\n    }, \"Type: IBM Plex Sans\", React.createElement(\"br\", null), \"Size: 36px / 2.25rem\", React.createElement(\"br\", null), \"Line height: 44px / 2.75rem \", React.createElement(\"br\", null), \"Weight: 300 / Light\", React.createElement(\"br\", null), \"Letter-spacing: 0px\"));\n  }\n\n}"},"fields":{"slug":"/guidelines/typography/productive","currentPage":"productive"},"frontmatter":{"title":"Typography","label":"When used properly, typography can help create clear hierarchies, organize information, and guide users through the product or experience.","tabs":["Overview","Productive"],"internal":null}}},"pageContext":{"slug":"/guidelines/typography/productive","currentPage":"productive"}}