{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Basic data table`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The data table component is designed in a way for additional functionality to be added on to fit your team’s needs.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The basic data table is shipped with a base style, which includes:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Borders`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `No zebra striping, row dividers instead.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `No Pagination, search, table toolbar, or multi-select`)), React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"images/data-table-usage-1.png\",\n        \"alt\": \"basic data table\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Basic data table`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Additonal functionality`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following can be added to the data table to increase its functionality.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Pagination`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Pagination divides table data into separate pages. Pagination is accompanied by an option that enables the user to change the number of items per page. See the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/Pagination\"\n      }\n    }, `pagination`), ` component for further guidelines.`), React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"images/data-table-usage-2.png\",\n        \"alt\": \"data table with pagination\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Data table with various Pagination methods`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Search`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Search returns results based on matches. It is used to locate and display a set of results. Search functionality within a table follows `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/search\"\n      }\n    }, `small search`), ` conventions. Search should be open by default, and live below the table title.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"src\": \"images/data-table-usage-3.png\",\n        \"alt\": \"data table with search\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Search on data tables`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Sorting`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Improve table usability by making data sortable. Clickable headers enable users to sort table data up or down. The specific attribute being sorted is accompanied by a caret icon. The caret will only appear on the column headers once that particular column is being sorted. You can see a demo of this on Carbon’s `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://codepen.io/tjegan/pen/PjjyVN\"\n      }\n    }, `Codepen.`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Table toolbar`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data. Additional options can be added if you have an icon to support that function. Icons should be 16x16 px (glyphs). We recommend using no more than 5 icons within the table toolbar.`), React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"images/data-table-usage-6.png\",\n        \"alt\": \"Table toolbar\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Table toolbar: table settings`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Multi-select / batch action`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Batch actions are functions that may be performed on multiple items within a table. Once the user selects more than one row from the table, the `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `batch action bar`), ` appears at the top of the table, presenting the user with actions they can take. To exit or escape “batch action mode,” the user can cancel out or deselect the items.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"src\": \"images/data-table-usage-7.png\",\n        \"alt\": \"Batch action mode\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Batch action mode on data tables`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Inline actions`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Inline actions are functions that may be performed on a specific table item. Each row is accompanied by an `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/overflow-menu\"\n      }\n    }, `overflow menu`), ` that contains actions related specifically to that table row.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"src\": \"images/data-table-usage-8.png\",\n        \"alt\": \"Inline action on data table\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Inline actions on data tables`)));\n  }\n\n}"},"fields":{"slug":"/components/data-table/usage","currentPage":"usage"},"frontmatter":{"title":"Data table","label":null,"tabs":["Code","Usage","Style"],"internal":null}}},"pageContext":{"slug":"/components/data-table/usage","currentPage":"usage"}}