{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `IBM’s icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information. They draw from details found in the Plex typeface and work well at small sizes.`), React.createElement(AnchorLinks, null, React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#usage-for-designers\"\n      }\n    }, `Usage for designers`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#usage-for-developers\"\n      }\n    }, `Usage for developers`)))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Resources`), React.createElement(GridWrapper, {\n      className: \"tile--resource--no-margin\",\n      col_lg: \"8\",\n      flex: \"true\",\n      bleed: \"true\"\n    }, React.createElement(ClickableTile, {\n      title: \"Elements package: Icons\",\n      href: \"https://github.com/IBM/carbon-elements/tree/master/packages/icons\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"github icon\",\n      title: \"\",\n      src: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png\",\n      srcSet: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    }))), React.createElement(ClickableTile, {\n      title: \"Elements package: Icons-React\",\n      href: \"https://github.com/IBM/carbon-elements/tree/master/packages/icons-react\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"github icon\",\n      title: \"\",\n      src: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png\",\n      srcSet: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    })))), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Usage for designers`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Sizing`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `UI icons that appear within Carbon components are generally 16 px squares, however icons sized at 20 px, 24 px, and 32 px can be also used within the UI. Icons should only be used at their original sizes and not resized in code.`), React.createElement(ImageComponent, {\n      cols: \"12\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography_usage_sizing-alt-489d639cdc0e4f517ed56d65fbf688d1.svg\",\n        \"alt\": \"icon sizing\"\n      }\n    })), React.createElement(ImageComponent, {\n      cols: \"12\",\n      caption: \"16 px and 20 px icons are optimized to feel balanced when paired with 14pt and 16pt IBM Plex. Use 24 px and 32 px when larger icons are needed.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-sizing-2-498befeeb656121ed2218a91772548c1.svg\",\n        \"alt\": \"icon alignment\"\n      }\n    })), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Do use the correct icon size with IBM Plex.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-sizing-3-ae09c60ca0353380e0b0077013776f8f.svg\",\n        \"alt\": \"proper sizing\"\n      }\n    })), React.createElement(DoDontExample, {\n      label: \"Don\\u2019t alter the icon-text size ratio.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-sizing-4-7c9a8c5d53c2b7fdf3ec17f3ed3334f4.svg\",\n        \"alt\": \"improper sizing\"\n      }\n    }))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Touch targets`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All touch targets for interactive icons need to be 44 px or larger. Developers can add padding to a touch target with CSS to meet the 44 px requirement.`), React.createElement(ImageComponent, {\n      cols: \"4\",\n      caption: \"The menu button that is also a touch target may have a 20px x 20px icon centered in a 48px x 48px button.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-padding-6-db2285de61c2626817717dc6cf2ed9a3.svg\",\n        \"alt\": \"touch target padding\"\n      }\n    })), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Color`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Icons are always a solid, monochromatic color and need to pass the same color contrast ratio as typography (4.5:1). The color of the icon should reflect the importance of the icon’s action which should always be to help guide a user. For more information on color, see the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/guidelines/color\"\n      }\n    }, `Color guidelines`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `It’s also important to note that Carbon v10 icons themselves do not have interaction states, only their backgrounds do.`), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Do match your icon color with your text color when pairing them.\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1088px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"100%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"proper alignment\",\n      title: \"\",\n      src: \"/static/199cc679aae7b270b1473d73fdff54ea/782a8/iconography-color-01.png\",\n      srcSet: \"/static/199cc679aae7b270b1473d73fdff54ea/016b5/iconography-color-01.png 280w,\\n/static/199cc679aae7b270b1473d73fdff54ea/3a723/iconography-color-01.png 560w,\\n/static/199cc679aae7b270b1473d73fdff54ea/782a8/iconography-color-01.png 1088w\",\n      sizes: \"(max-width: 1088px) 100vw, 1088px\"\n    }))), React.createElement(DoDontExample, {\n      label: \"Don\\u2019t use different colors for text and icons.\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1088px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"100%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"improper alignment\",\n      title: \"\",\n      src: \"/static/6e1f880e1172ff9272fb16cd09867e10/782a8/iconography-color-02.png\",\n      srcSet: \"/static/6e1f880e1172ff9272fb16cd09867e10/016b5/iconography-color-02.png 280w,\\n/static/6e1f880e1172ff9272fb16cd09867e10/3a723/iconography-color-02.png 560w,\\n/static/6e1f880e1172ff9272fb16cd09867e10/782a8/iconography-color-02.png 1088w\",\n      sizes: \"(max-width: 1088px) 100vw, 1088px\"\n    })))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Alignment`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When used next to text, icons should be center-aligned.`), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Do center-align icons when they\\u2019re next to text.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-sizing-5-1450b1f33d7dbe1e4045a5f76ca666d4.svg\",\n        \"alt\": \"proper alignment\"\n      }\n    })), React.createElement(DoDontExample, {\n      label: \"Don\\u2019t baseline-align icons to the text.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/iconography-usage-sizing-6-66143a7daffbf8699e5634201f1a792c.svg\",\n        \"alt\": \"improper alignment\"\n      }\n    }))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Usage for developers`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Using SVG sprite (recommended)`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Requirements:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Install `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `carbon-icons`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(\"p\", null, `Full installation details can be found in the `, React.createElement(\"a\", {\n      href: \"https://github.com/ibm/carbon-icons\",\n      target: \"blank\"\n    }, `Carbon icons GitHub repo.`))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Using SVG sprite from static assets (recommended)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use the SVG sprite (`, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `carbon-icons.svg`), `) by serving it as a static asset.\nThen reference the SVG icon you want to display using a path to the SVG sprite file.\nTo use SVG sprite files, they `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `must`), ` be distributed through a web server and while using `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `svgxuse`), `.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<!-- From static assets  -->\n<svg>\n  <use xlink:href=\"/path_to_static-assets/carbon-icons.svg#icon_name\"></use>\n</svg>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `path_to_static-assets`), ` is the path to your static assets where `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `carbon-icons.svg`), ` is located.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `icon_name`), ` is the icon name, which will display the corresponding icon. Refer to the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"%22/guidelines/iconography%22\"\n      }\n    }, `iconography library`), ` page for a full list of icon names.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `CSS`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You can override size and color with CSS.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<svg class=\"icon\">\n  <use xlink:href=\"/path_to_static-assets/carbon-icons.svg#icon_name\"></use>\n</svg>\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `.icon {\n  width: 24px;\n  height: 24px;\n  fill: red;\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All icons in the library are standardized so that they do not include `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `stroke`), ` or internal spacing (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `padding`), `).`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Inline SVG`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you’re unable to use the recommended SVG sprite or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `svgxuse`), `, you can inline SVG directly into your HTML.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Visit carbon-icons and browse the svg folder for any icons you want to use. (Remember, svg subfolders contain deprecated icons. Don’t use these.)`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Main files`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon icons ship with two main SVG files that contain different sets of external SVG sprite files:`), React.createElement(MDXTag, {\n      name: \"table\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"thead\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"thead\"\n    }, React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Filename`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Description`), React.createElement(MDXTag, {\n      name: \"th\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Supported versions`))), React.createElement(MDXTag, {\n      name: \"tbody\",\n      components: components,\n      parentName: \"table\"\n    }, React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `carbon-icons.svg`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `Contains current icons (consolidated subset of legacy icons used in IBM Bluemix)`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`), ` & newer`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `carbon-icons.json`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `JSON file created from carbon-icons.svg, used in `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"td\",\n      props: {\n        \"href\": \"/guidelines/iconography/library\"\n      }\n    }, `Carbon`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`), ` & newer`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `carbon-icons.js`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `JS module created from carbon-icons.svg, used in `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `Icon`), ` React Component in `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"td\",\n      props: {\n        \"href\": \"#\"\n      }\n    }, `carbon-components-react`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`), ` & newer`)), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `sprite.svg`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `SVG sprite contains legacy icons`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `1.x`), `,`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `2.x`), `&`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`))), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `icons.json`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `legacy JSON file created from sprite.svg`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `1.x`), `,`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `2.x`), `&`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`))), React.createElement(MDXTag, {\n      name: \"tr\",\n      components: components,\n      parentName: \"tbody\"\n    }, React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"td\"\n    }, `legacy-icons.js`)), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, `JS module created from sprite.svg`), React.createElement(MDXTag, {\n      name: \"td\",\n      components: components,\n      parentName: \"tr\",\n      props: {\n        \"align\": null\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"td\"\n    }, `3.x`), ` only`)))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Accessibility`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For screen reader accessibility, provide a context-rich title for the SVG using `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<title>`), ` element.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<svg>\n  <title>Add a new service</title>\n  <use xlink:href=\"/carbon-icons/dist/icon--add--glyph\"></use>\n</svg>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If support for older browsers is needed, use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `aria-labelledby`), ` attribute to reference the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<title>`), ` element using an `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `id`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<title>`), ` element will be read by the screen reader to the user, so it should describe its purpose.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Make sure that you do not duplicate this `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `id`), `.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<svg aria-labelledby=\"add\">\n  <title id=\"add\">Add a new service</title>\n  <use xlink:href=\"/carbon-icons/dist/icon--add\"></use>\n</svg>\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `For more details on accessibility, see the following resources:`), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `“Accessible SVGs” via `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://css-tricks.com/accessible-svgs/\"\n      }\n    }, `CSS-Tricks`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `“5.4 The ‘desc’ and ‘title’ elements” via `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.w3.org/TR/SVG11/struct.html#DescriptionAndTitleElements\"\n      }\n    }, `W3C.org`))));\n  }\n\n}"},"fields":{"slug":"/research-in-practice/craft-insights/craft-insights","currentPage":"craft-insights"},"frontmatter":{"title":"Iconography","label":"IBM’s icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.","tabs":["Library","Usage","Contribution"],"internal":null}}},"pageContext":{"slug":"/research-in-practice/craft-insights/craft-insights","currentPage":"craft-insights"}}