{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `With our new bespoke corporate typeface, IBM Plex™, comes a new set of guidance and best practices. Type Specs helps to set up a start point to apply typography—type scales, styles and alignment on screens.`), React.createElement(AnchorLinks, null, React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#type-tokens-and-sets\"\n      }\n    }, `Type tokens and sets`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#typeface-ibm-plex\"\n      }\n    }, `Typeface: IBM Plex`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#scale\"\n      }\n    }, `Scale`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#style\"\n      }\n    }, `Style`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#type-color\"\n      }\n    }, `Type color`)))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Resources`), React.createElement(GridWrapper, {\n      className: \"tile--resource--no-margin\",\n      col_lg: \"8\",\n      flex: \"true\",\n      bleed: \"true\"\n    }, React.createElement(ClickableTile, {\n      title: \"Get the latest IBM Plex\\u2122 download on GitHub\",\n      href: \"https://github.com/IBM/plex/releases/latest\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"github icon\",\n      title: \"\",\n      src: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png\",\n      srcSet: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    }))), React.createElement(ClickableTile, {\n      title: \"Visit the IBM Plex\\u2122 website to learn more\",\n      href: \"https://www.ibm.com/plex/\",\n      type: \"resource\"\n    }), React.createElement(ClickableTile, {\n      title: \"Elements package: Type\",\n      href: \"https://github.com/IBM/carbon-elements/tree/master/packages/type\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"github icon\",\n      title: \"\",\n      src: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png\",\n      srcSet: \"/static/685e175fe4a49ccc584e92390bde04d2/fdc01/github-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    }))), React.createElement(ClickableTile, {\n      title: \"Type package preview\",\n      href: \"https://github.com/IBM/carbon-elements/tree/master/packages/type\",\n      type: \"resource\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"200px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"98%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"sandbox icon\",\n      title: \"\",\n      src: \"/static/6c228cfe2ab2ee15d1c722c13f3eced0/fdc01/sandbox-icon.png\",\n      srcSet: \"/static/6c228cfe2ab2ee15d1c722c13f3eced0/fdc01/sandbox-icon.png 200w\",\n      sizes: \"(max-width: 200px) 100vw, 200px\"\n    })))), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Type tokens and sets`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon uses type tokens and themes to manage typrography. Carbon uses type tokens and types sets to manage typrography. Type tokens are simply pre-set configurations of typographic elements (font-size, weight, line-height, etc) that are specifically calibrated for use in IBM product design. Selecting the appropriate type style is determined by layout or template structure. Layouts may have several levels of architecture or areas that require varying typographic hierarchies.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Productive vs. Expressive type sets`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Productive type is reserved for use in web-based product design, where the user needs to focus on tasks. The Productive styles are curated to create a series of clear user expectations about hierarchy. Expressive type, on the other hand, allows for a more dramatic, graphic use of type in editorial and marketing design — which many users would find distracting in product.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are two heading sets, one Productive and one Expressive. The difference between the Productive and Expressive styles is mainly evident in the Headings. Aside from the token names, which are specifically calibrated for product vs. editorial designers (e.g. \\$label-01 vs. \\$caption-01) — the Supporting and Body styles have the same values in both the Productive and Expressive sets.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Typeface: IBM Plex`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon uses the open-source typeface `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `IBM Plex`), `. It has been carefully designed to meet IBM’s needs as a global technology company and reflect IBM’s spirit, beliefs, and design principles. IBM Plex can be accessed and downloaded from the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/ibm/plex\"\n      }\n    }, `Plex GitHub Repo`), `.`), React.createElement(TypeWeight, {\n      type: \"types\"\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Sans-serif font stack`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `font-family: 'IBM Plex Sans', 'Helvetica Neue', Arial, sans-serif;\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Serif font stack`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `font-family: 'IBM Plex Serif', 'Georgia', Times, serif;\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Mono font stack`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-scss\"\n      }\n    }, `font-family: 'IBM Plex Mono', 'Menlo', 'DejaVu Sans Mono',\n  'Bitstream Vera Sans Mono', Courier, monospace;\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Scale`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The IBM type scale is built on a single equation. The formula for our scale was created to provide hierarchy for all types of experiences. The formula assumes that y₀=12 px:`), React.createElement(TypeScaleTable, null), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `Xn = Xn-1 + {INT[(n-2)/4] + 1} * 2\nXn: step n type size Xn-1: step n-1 type size\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Style`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Typography creates purposeful texture, guiding users to read and understand the hierarchy of information. The right typographic treatment and the controlled usage of type styles helps manage the display of content, keeping it useful, simple, and effective.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Weights`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Font weight is an important typographic variable that can add emphasis and differentiate content hierarchy. Font weight and size pairings must be carefully balanced. A bold weight will always have more emphasis than a lighter weight font of the same size. However, a lighter weight font can rank hierarchically higher than a bold font if the lighter weight type size is significantly larger than the bold one.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We suggest using IBM Plex Light, Regular, and SemiBold for digital experiences. The semibold weight is ideal for section headers, but should not be used for long text.`), React.createElement(TypeWeight, null), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Italic`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Each weight has an italic style, which should only be used when you need to emphasize certain words in a sentence (titles of works, technical terms, names of devices, captions, etc.).`), React.createElement(TypeWeight, {\n      type: \"italic\"\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Type color`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Type color should be carefully considered, with legibility and accessibility as paramount concerns. Keep type color neutral in running text. Use primary blue for primary actions.`), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-1-c62b2ead82d277c708c6478416bc2ed7.svg\",\n        \"alt\": \"Neutral color for text\"\n      }\n    })), React.createElement(DoDontExample, null, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-2-6dd70c4eb05b74e0e64e319efb96e9ae.svg\",\n        \"alt\": \"I'm a magenta sentence for no reason\"\n      }\n    }))), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      dark: \"true\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-3-bd205bd9e609d2c3fa668c47f287d18e.svg\",\n        \"alt\": \"Neutral color for text\"\n      }\n    })), React.createElement(DoDontExample, {\n      dark: \"true\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-4-85e6ec7a8f025768a2fb99158980ebaf.svg\",\n        \"alt\": \"Color is not for decoration\"\n      }\n    }))), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Core blue colors are used for text links and primary actions\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-5-d71ae288b89e4368fb7dd5fdb9bdf49b.svg\",\n        \"alt\": \"Link with icon\"\n      }\n    })), React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Secondary actions use Gray 100 and icons\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-6-7470031ea82790f8813a4e3e9cb23e52.svg\",\n        \"alt\": \"Download with icon\"\n      }\n    }))), React.createElement(GridWrapper, {\n      col_lg: \"8\",\n      flex: \"true\"\n    }, React.createElement(DoDontExample, {\n      correct: \"true\",\n      label: \"Other use cases for colored type are code snippets, warnings, alerts, etc.\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-7-b42ebaf8b4289e1da89c9b184b6bec3f.svg\",\n        \"alt\": \"Oops, something went wrong! colored text\"\n      }\n    })), React.createElement(DoDontExample, {\n      correct: \"true\"\n    }, React.createElement(MDXTag, {\n      name: \"img\",\n      components: components,\n      props: {\n        \"src\": \"/Typography_overview_Type-color-8-b73c46a93802fc24874a9f3159a16d63.svg\",\n        \"alt\": \"Code snippet with colored highlight type\"\n      }\n    }))));\n  }\n\n}"},"fields":{"slug":"/research-in-practice/typography/overview","currentPage":"overview"},"frontmatter":{"title":"Typography","label":"When used properly, typography can help create clear hierarchies, organize information, and guide users through the product or experience.","tabs":["Overview","Productive"],"internal":null}}},"pageContext":{"slug":"/research-in-practice/typography/overview","currentPage":"/research-in-practice/typography/overview"}}