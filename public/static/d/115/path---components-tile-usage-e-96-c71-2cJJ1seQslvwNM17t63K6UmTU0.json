{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `General guidance`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Tiles are a highly flexible component for displaying a wide variety of content, including informational, getting started, how-to, next steps, and more.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Carbon ships a basic tile structure that responds to the grid. Tiles have no pre-set styles for the content within them. You can customize tiles to fit your specific use case.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When using a call-to-action (CTA) within a tile, use a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/button\"\n      }\n    }, `secondary button`), `. Primary buttons should be reserved for the most important action a user can take on the page.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Variations`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `All of the images below represent examples of types of content that could be presented within a tile. The styling in these examples is for illustration only; you are free to create your own layout and design within a tile.`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Read-only`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Read-only tiles are used to display information to the user, such as features or services offered. Read-only tiles are often seen on marketing pages to promote content. These tiles can have internal calls-to-action (CTAs), such as a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/button\"\n      }\n    }, `button`), ` or a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/link\"\n      }\n    }, `link`), `.`), React.createElement(ImageComponent, {\n      cols: \"12\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1120px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"42.76785714285714%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"Example image of read-only tiles.\",\n      title: \"\",\n      src: \"/static/7e413c28826c8dfc4ed872f1a2f03167/24bd0/tile-usage-1.png\",\n      srcSet: \"/static/7e413c28826c8dfc4ed872f1a2f03167/7cb4c/tile-usage-1.png 280w,\\n/static/7e413c28826c8dfc4ed872f1a2f03167/7ff44/tile-usage-1.png 560w,\\n/static/7e413c28826c8dfc4ed872f1a2f03167/24bd0/tile-usage-1.png 1120w,\\n/static/7e413c28826c8dfc4ed872f1a2f03167/7e58d/tile-usage-1.png 1680w,\\n/static/7e413c28826c8dfc4ed872f1a2f03167/8ef2b/tile-usage-1.png 2240w\",\n      sizes: \"(max-width: 1120px) 100vw, 1120px\"\n    }))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Clickable`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Clickable tiles can be used as navigational items, where the entire tile is a clickable state, which redirects the user to a new page. Clickable tiles cannot contain separate internal CTAs.`), React.createElement(ImageComponent, {\n      cols: \"12\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1120px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"28.035714285714285%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"Example image of clickable tiles.\",\n      title: \"\",\n      src: \"/static/3f0c8594d4bda30fcb1919fa4bcd079b/24bd0/tile-usage-2.png\",\n      srcSet: \"/static/3f0c8594d4bda30fcb1919fa4bcd079b/7cb4c/tile-usage-2.png 280w,\\n/static/3f0c8594d4bda30fcb1919fa4bcd079b/7ff44/tile-usage-2.png 560w,\\n/static/3f0c8594d4bda30fcb1919fa4bcd079b/24bd0/tile-usage-2.png 1120w,\\n/static/3f0c8594d4bda30fcb1919fa4bcd079b/7e58d/tile-usage-2.png 1680w,\\n/static/3f0c8594d4bda30fcb1919fa4bcd079b/8ef2b/tile-usage-2.png 2240w\",\n      sizes: \"(max-width: 1120px) 100vw, 1120px\"\n    }))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Selectable`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Selectable tiles work like a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/components/radio-button\"\n      }\n    }, `radio button`), `, where the entire tile is a click target. Selectable tiles may contain internal CTAs (like links to docs) if the internal CTA is given its own click target. Selectable tiles work well for presenting options to a user in a structured manner, such as a set of pricing plans.`), React.createElement(ImageComponent, {\n      cols: \"12\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1120px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"28.035714285714285%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"Example image of selectable tiles.\",\n      title: \"\",\n      src: \"/static/881a6caf84b59f30f41586d94198713e/24bd0/tile-usage-3.png\",\n      srcSet: \"/static/881a6caf84b59f30f41586d94198713e/7cb4c/tile-usage-3.png 280w,\\n/static/881a6caf84b59f30f41586d94198713e/7ff44/tile-usage-3.png 560w,\\n/static/881a6caf84b59f30f41586d94198713e/24bd0/tile-usage-3.png 1120w,\\n/static/881a6caf84b59f30f41586d94198713e/7e58d/tile-usage-3.png 1680w,\\n/static/881a6caf84b59f30f41586d94198713e/8ef2b/tile-usage-3.png 2240w\",\n      sizes: \"(max-width: 1120px) 100vw, 1120px\"\n    }))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Expandable`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Expandable tiles are helpful for hiding/showing larger amounts of content to a user. They can only be stacked in a single column, and cannot live in a row or horizontal grid. When expanded, tiles push content down the page. Expandable tiles may contain internal CTAs (like links to docs) if the internal CTA is given its own click target.`), React.createElement(ImageComponent, {\n      cols: \"12\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"1120px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"57.14285714285714%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n      },\n      alt: \"Example image of expandable tiles.\",\n      title: \"\",\n      src: \"/static/0026696e75f036f705db74f60c075e43/24bd0/tile-usage-4.png\",\n      srcSet: \"/static/0026696e75f036f705db74f60c075e43/7cb4c/tile-usage-4.png 280w,\\n/static/0026696e75f036f705db74f60c075e43/7ff44/tile-usage-4.png 560w,\\n/static/0026696e75f036f705db74f60c075e43/24bd0/tile-usage-4.png 1120w,\\n/static/0026696e75f036f705db74f60c075e43/7e58d/tile-usage-4.png 1680w,\\n/static/0026696e75f036f705db74f60c075e43/8ef2b/tile-usage-4.png 2240w\",\n      sizes: \"(max-width: 1120px) 100vw, 1120px\"\n    }))));\n  }\n\n}"},"fields":{"slug":"/components/tile/usage","currentPage":"usage"},"frontmatter":{"title":"Tile","label":null,"tabs":["Code","Usage","Style"],"internal":null}}},"pageContext":{"slug":"/components/tile/usage","currentPage":"usage"}}